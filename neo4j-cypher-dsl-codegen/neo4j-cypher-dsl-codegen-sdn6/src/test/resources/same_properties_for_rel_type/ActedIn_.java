package org.neo4j.cypherdsl.codegen.sdn6.models.valid.same_properties_for_rel_type;

import javax.annotation.Generated;
import org.neo4j.cypherdsl.core.MapExpression;
import org.neo4j.cypherdsl.core.Node;
import org.neo4j.cypherdsl.core.NodeImpl;
import org.neo4j.cypherdsl.core.Properties;
import org.neo4j.cypherdsl.core.Property;
import org.neo4j.cypherdsl.core.RelationshipImpl;
import org.neo4j.cypherdsl.core.SymbolicName;

@Generated(
	value = "org.neo4j.cypherdsl.codegen.core.RelationshipImplBuilder",
	date = "2019-09-21T21:21:00+01:00",
	comments = "This class is generated by the Neo4j Cypher-DSL. All changes to it will be lost after regeneration."
)
public final class ActedIn_<E extends NodeImpl<?>> extends RelationshipImpl<Person_, E, ActedIn_<E>> {
	public final Property ROLES = this.property("roles");

	public ActedIn_(Person_ start, E end) {
		super(start, "ACTED_IN", end);
	}

	private ActedIn_(SymbolicName symbolicName, Node start, String type, Properties properties,
		Node end) {
		super(symbolicName, start, type, properties, end);
	}

	@Override
	public ActedIn_<E> named(SymbolicName newSymbolicName) {
		return new ActedIn_<>(newSymbolicName, getLeft(), getRequiredType(), getDetails().getProperties(), getRight());
	}

	@Override
	public ActedIn_<E> withProperties(MapExpression newProperties) {
		return new ActedIn_<>(getSymbolicName().orElse(null), getLeft(), getRequiredType(), Properties.create(newProperties), getRight());
	}
}