/*
 * Copyright (c) 2019-2023 "Neo4j,"
 * Neo4j Sweden AB [https://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.neo4j.cypherdsl.codegen.core;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;

/**
 * @author Andreas Berger
 */
class ModelBuilderTest {

	@Test
	void testGeneratingRelationWithMultipleStartAndEndNodes() {
		var configuration = Configuration.newConfig().build();
		var a = NodeModelBuilder.create(configuration, null, "A")
			.addLabel("A");
		var b = NodeModelBuilder.create(configuration, null, "B")
			.addLabel("B");
		var c = NodeModelBuilder.create(configuration, null, "C")
			.addLabel("C");
		var rel = RelationshipModelBuilder.create(configuration, null, "BELONGS_TO")
			.addRelationship(a, b)
			.addRelationship(a, c)
			.addRelationship(c, b);

		a.addRelationshipDefinition(
			RelationshipPropertyDefinition.create("BELONGS_TO", null, "belongsTo", a, b, null).withBuilder(rel));
		a.addRelationshipMethod(RelationshipMethodDefinition.create("belongsTo", a, b).withBuilder(rel));
		a.addRelationshipMethod(RelationshipMethodDefinition.create("belongsTo", a, c).withBuilder(rel));

		b.addRelationshipDefinition(
			RelationshipPropertyDefinition.create("BELONGS_TO", null, "belongsTo", a, b, null).withBuilder(rel));
		b.addRelationshipMethod(RelationshipMethodDefinition.create("belongsTo", a, b).withBuilder(rel));

		assertThat(a.writeToString()).isEqualTo("""
			import java.util.List;
			import org.neo4j.cypherdsl.core.MapExpression;
			import org.neo4j.cypherdsl.core.NodeBase;
			import org.neo4j.cypherdsl.core.NodeLabel;
			import org.neo4j.cypherdsl.core.Properties;
			import org.neo4j.cypherdsl.core.SymbolicName;

			/**
			 * This class is generated by the Neo4j Cypher-DSL. All changes to it will be lost after regeneration.
			 */
			public final class A_ extends NodeBase<A_> {
				public static final A_ A = new A_();

				public final BelongsTo_<A_, B_> BELONGS_TO = new BelongsTo_<A_, B_>(this, B_.B);

				public A_() {
					super("A");
				}

				private A_(SymbolicName symbolicName, List<NodeLabel> labels, Properties properties) {
					super(symbolicName, labels, properties);
				}

				@Override
				public A_ named(SymbolicName newSymbolicName) {
					return new A_(newSymbolicName, getLabels(), getProperties());
				}

				@Override
				public A_ withProperties(MapExpression newProperties) {
					return new A_(getSymbolicName().orElse(null), getLabels(), Properties.create(newProperties));
				}

				public BelongsTo_<A_, B_> belongsTo(B_ end) {
					return new BelongsTo_<A_, B_>(this, end);
				}

				public BelongsTo_<A_, C_> belongsTo(C_ end) {
					return new BelongsTo_<A_, C_>(this, end);
				}
			}
			""");

		assertThat(b.writeToString()).isEqualTo("""
			import java.util.List;
			import org.neo4j.cypherdsl.core.MapExpression;
			import org.neo4j.cypherdsl.core.NodeBase;
			import org.neo4j.cypherdsl.core.NodeLabel;
			import org.neo4j.cypherdsl.core.Properties;
			import org.neo4j.cypherdsl.core.SymbolicName;

			/**
			 * This class is generated by the Neo4j Cypher-DSL. All changes to it will be lost after regeneration.
			 */
			public final class B_ extends NodeBase<B_> {
				public static final B_ B = new B_();

				public final BelongsTo_<A_, B_> BELONGS_TO = new BelongsTo_<A_, B_>(A_.A, this);

				public B_() {
					super("B");
				}

				private B_(SymbolicName symbolicName, List<NodeLabel> labels, Properties properties) {
					super(symbolicName, labels, properties);
				}

				@Override
				public B_ named(SymbolicName newSymbolicName) {
					return new B_(newSymbolicName, getLabels(), getProperties());
				}

				@Override
				public B_ withProperties(MapExpression newProperties) {
					return new B_(getSymbolicName().orElse(null), getLabels(), Properties.create(newProperties));
				}

				public BelongsTo_<A_, B_> belongsTo(A_ start) {
					return new BelongsTo_<A_, B_>(start, this);
				}
			}
			""");

		assertThat(rel.writeToString()).isEqualTo("""
			import org.neo4j.cypherdsl.core.MapExpression;
			import org.neo4j.cypherdsl.core.Node;
			import org.neo4j.cypherdsl.core.NodeBase;
			import org.neo4j.cypherdsl.core.Properties;
			import org.neo4j.cypherdsl.core.RelationshipBase;
			import org.neo4j.cypherdsl.core.SymbolicName;

			/**
			 * This class is generated by the Neo4j Cypher-DSL. All changes to it will be lost after regeneration.
			 */
			public final class BelongsTo_<S extends NodeBase<?>, E extends NodeBase<?>> extends RelationshipBase<S, E, BelongsTo_<S, E>> {
				public static final String $TYPE = "BELONGS_TO";

				public BelongsTo_(A_ start, B_ end) {
					super(start, $TYPE, end);
				}

				public BelongsTo_(A_ start, C_ end) {
					super(start, $TYPE, end);
				}

				public BelongsTo_(C_ start, B_ end) {
					super(start, $TYPE, end);
				}

				private BelongsTo_(SymbolicName symbolicName, Node start, Properties properties, Node end) {
					super(symbolicName, start, $TYPE, properties, end);
				}

				@Override
				public BelongsTo_<S, E> named(SymbolicName newSymbolicName) {
					return new BelongsTo_<>(newSymbolicName, getLeft(), getDetails().getProperties(), getRight());
				}

				@Override
				public BelongsTo_<S, E> withProperties(MapExpression newProperties) {
					return new BelongsTo_<>(getSymbolicName().orElse(null), getLeft(), Properties.create(newProperties), getRight());
				}
			}
			""");
	}

}
