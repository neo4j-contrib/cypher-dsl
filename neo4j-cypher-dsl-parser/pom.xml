<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) "Neo4j"
    Neo4j Sweden AB [http://neo4j.com]

    This file is part of Neo4j.

    Neo4j is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.neo4j</groupId>
		<artifactId>neo4j-cypher-dsl-parent</artifactId>
		<version>${revision}${sha1}${changelist}</version>
	</parent>

	<artifactId>neo4j-cypher-dsl-parser</artifactId>

	<name>Neo4j Cypher DSL (Parser)</name>
	<description>Building on top of the Neo4j 4.4 JavaCC parsers it provides a way from Cypher to Cypher-DSL Ast.</description>

	<licenses>
		<license>
			<name>GNU General Public License, Version 3</name>
			<url>http://www.gnu.org/licenses/gpl-3.0-standalone.html</url>
			<comments>The software ("Software") developed and owned by Neo4j Sweden AB (referred to in this notice as "Neo4j") is
				licensed under the GNU GENERAL PUBLIC LICENSE Version 3 to all third
				parties and that license is included below.

				However, if you have executed an End User Software License and Services
				Agreement or an OEM Software License and Support Services Agreement, or
				another commercial license agreement with Neo4j or one of its
				affiliates (each, a "Commercial Agreement"), the terms of the license in
				such Commercial Agreement will supersede the GNU GENERAL PUBLIC LICENSE
				Version 3 and you may use the Software solely pursuant to the terms of
				the relevant Commercial Agreement.</comments>
		</license>
	</licenses>

	<properties>
		<covered-ratio-complexity>0.68</covered-ratio-complexity>
		<sonar.coverage.jacoco.xmlReportPaths>${basedir}/../${aggregate.report.dir}</sonar.coverage.jacoco.xmlReportPaths>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
		</dependency>

		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-cypher-dsl</artifactId>
			<version>${revision}${sha1}${changelist}</version>
		</dependency>

		<dependency>
			<groupId>org.neo4j</groupId>
			<artifactId>neo4j-cypher-javacc-parser</artifactId>
		</dependency>

		<dependency>
			<groupId>io.projectreactor</groupId>
			<artifactId>reactor-core</artifactId>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.neo4j.driver</groupId>
			<artifactId>neo4j-java-driver</artifactId>
			<scope>provided</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>com.opencsv</groupId>
			<artifactId>opencsv</artifactId>
			<version>${opencsv.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.asciidoctor</groupId>
			<artifactId>asciidoctorj</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>

		<dependency>
			<groupId>org.neo4j.test</groupId>
			<artifactId>neo4j-harness</artifactId>
			<version>${neo4j.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration combine.self="append">
					<licenseSets>
						<licenseSet>
							<header>etc/license-gpl.tpl</header>
						</licenseSet>
					</licenseSets>
				</configuration>
			</plugin>
			<!--
			Don't change the order of maven-javadoc-plugin, maven-shade-plugin, moditect-maven-plugin:
			- JavaDoc can't live with a module-info.java that requires automatic modules and mess up class- and module path
			  (JavaCC Cypher parser and dependencies are only automatic ones)
			- Even if we would have one, the shade plugin would nuke it without an option to say "yes, this is ok, we know what we are doing"
			- Therefor, we must add it "manually" with moditect
			- That must however happen after javadoc plugin did his work. The resulting javadoc could be better, because right now
			  it is based on the non-modular source version, whereas a proper one would be perfectly possible if the plugin
			  just would allow to specify class- and module-path manually and independent.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<includes>
									<include>org.neo4j:cypher-ast-factory</include>
									<include>org.neo4j:neo4j-cypher-javacc-parser</include>
								</includes>
							</artifactSet>
							<relocations>
								<relocation>
									<pattern>org.neo4j.cypher.internal</pattern>
									<shadedPattern>org.neo4j.cypherdsl.parser.internal</shadedPattern>
								</relocation>
							</relocations>
							<createSourcesJar>true</createSourcesJar>
							<filters>
								<filter>
									<artifact>*:*</artifact>
									<excludes>
										<exclude>META-INF/*</exclude>
										<exclude>module-info.class</exclude>
										<exclude>library.properties</exclude>
										<exclude>LICENSE.txt</exclude>
										<exclude>rootdoc.txt</exclude>
									</excludes>
								</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.moditect</groupId>
				<artifactId>moditect-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>add-module-infos</id>
						<phase>package</phase>
						<goals>
							<goal>add-module-info</goal>
						</goals>
						<configuration>
							<overwriteExistingFiles>true</overwriteExistingFiles>
							<module>
								<moduleInfoSource><![CDATA[module org.neo4j.cypherdsl.parser {

										requires static org.jetbrains.annotations;

										requires transitive org.apiguardian.api;
										requires transitive org.neo4j.cypherdsl.core;

										// Those are shaded
										// requires org.neo4j.cypher.internal.parser.javacc;
										// requires org.neo4j.cypher.internal.ast.factory;

										exports org.neo4j.cypherdsl.parser;
									}]]></moduleInfoSource>
							</module>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>generate-test-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/test-classes</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}</directory>
									<includes>
										<include>README.adoc</include>
									</includes>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.github.siom79.japicmp</groupId>
				<artifactId>japicmp-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

	<reporting>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>
		</plugins>
	</reporting>
</project>
